Book Name: Learning Perl
Author: Randal L. Schwartz, Brain D Foy, Tom Phoenix
Edition: 6th Ed
Publisher: O'Reilly
Year: 2011
ISBN: 9781449303587

Chapter 11: Perl Modules
The Comprehensive Perl Archive Network(CPAN), which is a worldwide collection
of servers and mirrors containing thousands of modules of reusable Perl
code. Indeed, most of Perl 5 is in the modules since Larry designed it as an
extensible language.
A) Finding Modules
   a) Modules come in two types:
   	  1) Those that come with Perl that you should have available to you.
   	  2) Those that you can get from CPAN to install yourself.
   b) Check if the module is already installed:
   	  1) Read the document with perldoc. If error message like such as 'No
	     documentation found for "module name"' appears, that means the module
		 is not installed.
		 e.g. $perldoc Llamas
		 	  No documentation found for "Llamas".
	  2) Use the cpan command, which can create autobundle that contains a
	  	 list of everything you have installed, along with the version number:
		 syntax: $ cpan -a
B) Installing Modules
   a) If the module uses MakeMaker, the sequence will be:
   	  $ perl Makefile.PL
	  $ make install
	  If you can't install modules in the system-wide directories, you can
	  specify another directory with an INSTALL_BASE argument to Makefile.PL
   b) Some Perl module authors use another module, Module::Build, to build
      and install their creations. That sequence will be:
	  $ perl Build.PL
	  $ ./Build install
	  As before, you can specify an alternate installation directory:
	  $ perl Build.PL -- install_base=/Users/fred/lib
   c) Instead of doing all that work yourself, you can use one of the
   	  modules that comes that come with Perl, CPAN.pm. From the command
	  line, you can start up the CPAN.pm shell from which you can issue
	  commands:
	  $ perl -MCPAN -e shell
   d) Even this can be a little complicated, so a while ago one of our four
      authors wrote a little script called cpan, which also comes with Perl 
	  and is usually installed with perl and its tools. Just call the script
	  with a list of the modules you want to install: 
	  $ cpan Module::CoreList LWP CGI::Prototype 
   e) There's another handy tool, cpanm(for cpanminus), although it doesn't
      come with perl(yet). It's designed as a zero-conf, lightweight CPAN
	  client that handles most of what people want to do. You can download the
	  single file from http://xrl.us/cpanm to get started
	  Once you have cpanm, you can install module with:
	  $ cpanm DBI WWW:Mechanize
   f) If you are using the ActiveState port of Perl(for Windows, Linux, or
      Solaris), you can use the Perl Package Manager(PPM), which installs
	  module for you. You can even get the ActiveState ports on CD or DVD.
   g) Using Your Own Directories
   	  The easiest way for beginners to keep additional Perl modules in their
	  own directorise is to use local::lib, which you'll have to get from CPAN
	  since it doesn't come with perl(yet). This module sets the various
	  environment variable that affect where CPAN clients install modules. You
	  can see what they set by loading the module on the command line without
	  anything else:
	  $ perl -Mlocal::lib
	  The cpan client supports this if you use the -I switch to install
	  modules:
	  $ cpan -I Set::Crossproduct
	  The cpanm tool is a bit smarter. If you've already set the same
	  environment variables local::lib would set for you, you uses them. If
	  not, it checks the default module directories for write presmissions. If
	  you don't have the permissions. it automatically uses local::lib for
	  you. If you want to be sure to use local::lib explicitly, you can do:
	  $ cpanm --local-lib HTML::Parser
	  Advanced users can configure their CPAN clients to install into whatever
	  directories that they like, too.
	  You can set this in your CPAN.pm configuration so modules automatically
	  install in your private library directory when you use the CPAN.pm
	  shell. You need to configure two settings, one each for the
	  ExtUtils::Makemaker and Module::Build system:
	  $ cpan
	  cpan> o conf makepl_arg INSTALL_BASE=/User/fred/perl5
	  cpan> o conf mbuild_arg "--install_base /User/fred/perl5"
	  cpan> o conf commit
	  Inside your program, you put:
	  use local::lib;
	  or
	  use lib qw(/User/fred/perl5);
C) Using Simple Modules
   a) The File::Basename Module
   	  e.g. use File::Basename;
	  	   my $name = "/usr/local/bin/perl";
		   my $basename = basename $name; # gives 'perl'
   b) Using Only Some Functions from a Module
   	  1) use nothing but basename:
	  	 use File::Basename qw/basename/;
	  2) use nothing:
	  	 use File::Basename qw/ /;
		 This is also frequently written as an empty set of parentheses:
		 use File::Basename ();
		 This tells perl to load up File::Basename so that you still can use
		 the functions:
		 use File::Basename qw/ /; # import nothing
		 my $betty = &dirname($wilma); # uses your own subroutine &dirname
		 my $name = "/usr/local/bin/perl";
		 my $dirname = File::Basename::dirname $name; # dirname from the module
   c) The File::Spec Module
   	  File::Spec is used for manipulating file specification, which are the
	  names of files, directories, and the other things that are stored on
	  filesystems. It is an object-oriented module.
	  e.g. my $new_name = File::Spec->catfile($dirname, $basename);
   d) Path::Class
   	  The Path::Class module, which doesn't come with perl, gives you a more
	  pleasant interfaces:
	  e.g. my $dir = dir(qw(Users fred lib));
	  	   my $subdir = $dir->subdir('perl5'); # Users/fred/lib/perl5
		   my $parent = $dir->parent; # Users/fred
		   my $windir = $dir->as_foreign('Win32'); # Users\fred\lib
   e) CGI.pm
   	  CGI.pm has many, many convenience functions to output HTML. It handles
	  the CGI header, the beginning parts of HTML with start_html(), and many
	  of the HTML tags with functions of the same name, like h1() for H1 tag:
	  e.g. use CGI qw(:all);
	  	   print header(),
		   		 start_html("This is the page title"),
				 h1("Input parameters");
		   my $list_items;
		   foreach my $param(param())
		   {
		       $list_items .= li("$param: " . param($param));
		   }
		   print ul($list_items);
		   print end_html();
   f) Databases and DBI
   	  The DBI(Database Interface) module doesn't come with Perl. It allows you
	  use the same interface for just about any database It is an OO
	  module. Once you install DBI, you also have to install a DBD(Database
	  Driver). 
	  1) connect:
	  	 use DBI;
		 $dbh = DBI->connect($data_source, $username, $password);
		 # $data_source - DBD you want to use
		 my $data_source = "dbi:Pg:dbname=name_of_database";
	  2) manipulate:
	  	 my $sth = $dbh->prepare("SELECT * FROM foo WHERE bla");
		 $sth->execute();
		 my @row_ary = $sth->fetchrow_array;
		 $sth->finish;
	  3) disconnect:
	  	 $dbh->disconnect();
   g) Dates and Times
   	  DateTime module and Time::Piece module

Summary:
Nothing special to summary. All details are given.

Exercises:
1) Install Module::CoreList module from CPAN. Print a list of all of the
   modules that comes with Perl 5.14. To build a hash whose keys are the names
   of the modules that came with a given version of perl, use this line:
   	  my %modules = %{$module::CoreList::version{5.014}};
2) Write a program using DateTime to compute the interval between now and a
   date that you enter as the year, month, and day on the command line:
   		$ perl duration.pl 1960 9 30
		50 years, 8 months, and 20 days
