Book Name: Learning Perl
Author: Randal L. Schwartz, Brain D Foy, Tom Phoenix
Edition: 6th Ed
Publisher: O'Reilly
Year: 2011
ISBN: 9781449303587

Chapter 9: Processing Text with Regular Expressions
A) Substitutions with s///
    a) Global Replacements with /g
	b) Different Delimiters
	   If you use paired characters, which have a left and right variety, you
	   have to use two pairs: one to hold the pattern and one to hold the
	   replacement string. In this case, the delimiters don't have to be the
	   same kind around the string as they around the pattern. In fact, the
	   delimiters of the string could even be nonpaired.
	   e.g. s{pattern}{string};
	   		s[pattern](string);
			s<pattern>#string#;
	c) Substitution Modifiers
	   1) /g - global replacement
	   2) /i - case insensitive
	   3) /x - allow extra whitespace
	   4) /s - match any character including newline [\d\D]
	d) The Binding Operator
	e) Nondestructive Substitutions
	   1) write as a single statement to assign a copy first then bind
	   e.g. (my $copy = $original) =~ s/pattern/string/;
	   2) Perl 5.14 adds a /r modifier for this purpose
	   e.g. my $copy = $original =~ s/pattern/string/r;
	f) Case Shifting
	   1) \U - changes to all uppercase
	   2) \L - changes to all lowercase
	   3) \u - changes the first character to uppercase
	   4) \l - changes the first character to lowercase
	   5) \E - turn off the case shifting
	   e.g. print "Hello, \L\u$name\E, would you like to paly a game?\n?";
B) The split Operator
   syntax: my @fields = split /separator/, $string;
   The default for split is to break up $_ on whitespace.
   e.g. my @fields = split; # like split /\s+/, $_;
   The noncapturing parentheses(?:) also works for the pattern in split.
C) The join Function
   syntax: my $result = join $glue, @pieces;
   Although split and join work well together, don't forget the first argument
   to join is always a string, not a pattern.
D) m// in List Context
   When a pattern match(m//) is used in a list context, the return value is a
   list of the capture variables created in the match, or an empty string if
   the match failed. This is like using split "inside out": instead of
   specifying what w want to remove, we specify what we want to keep.
   e.g. my $data = "Barney Rubble Fred Flintstone Wilma Flintstone";
   		my %last_name = ($data =~ /(\w+)\s+(\w+)/g);
		# It returns a pair of captures as a key-value pairs in a hash.
E) More Powerful Regular Expressions
    a) Nongreedy Quantifiers
	   For each of the greedy quantifiers, there's also a nongreedy quantifier
	   available, which is add a '?' after the greedy quantifier.
	   e.g. ?? - matches either one or none, but it prefers to match none.
	b) Matching Multiple-Line Text
	   Perl's patterns can match multiple lines of text as easily as single
	   line. So, we can read an entire file into one variable by using join.
	c) Updating Many Files
	   $^I - special variable for backup file.
	   <> - it will automatically open and close a series of files for you, or
	   read from the standard-input stream if there aren't any filenames given.
	d) In-Place Editing from the Command Line
	   syntax: perl -p -i.bak -w -e 'command' filenames
	   -p: tells Perl to write a program for you, which looks like:
	   	   while(<>)
		   {
		       print;
		   }
	   -i: same as $^I. If you don't want a backup file, you can use -i alone,
	       with no extension.
	   -w: turns on warnings.
	   -e: executable code follows
	   -n: automatic print statement
	   e.g. perl -p -i.bak -w -e 's/Randall/Randal/g' fred*.dat
	   		is the same as:
			#!/usr/bin/perl -w
			$^I = ".bak";
			while(<>)
			{
				s/Randall/Randal/g;
				print;
			}

Summary:
Nothing special to summary. Everything details is given.

Exercises:
1) Make a pattern that will match three consecutive copies of whatever is
   currently contained in $what. That is, if $what is fred|barney, the pattern
   should match fredfredbarney or barneyfredfred or barneyfredbarney, etc.
   File Name: findCopy3x.pl
2) Write a program that makes a modified copy of a text file. In the copy,
   every string Fred(case-insensitive) should be replaced with Larry. The
   input filename should be given on the command line, and the output filename
   should be the corresponding file name ending with .out.
   File Name: fredToLarry.pl
3) Modify exercise 2 to change every Fred to Wilma and every Wilma to Fred.
   File Name: switchFredWilma.pl
4) Write a program to add a copyright line to all of your exercise answer so
   far, by placing a line like:
   ## Copyright (C) 20xx by Yours Truly
   in the file immediately after the "shebang" line. You should edit the files
   "in places," keeping a backup.
   File Name: addCopyright.pl
5) Modify exercise 4 so that it doesn't edit the files that already contain
   the copyright line.
   File Name: addCopyrightv2.pl
